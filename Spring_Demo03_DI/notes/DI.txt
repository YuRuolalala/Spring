·依赖注入方式
    ·思考：
        ·向一个类中传递数据的方式有几种？
            ·普通方法(set方法)
            ·构造方法
        ·依赖注入描述了在容器中建立bean与bean之间依赖关系的过程，如果bean运行需要的是数字或者是字符串呢？
            ·引用类型
            ·简单类型(基本数据类型与String)
    ·依赖注入方式
        ·setter注入
            ·简单类型
                ·在bean中定义引用类型属性并提供可访问的set方法
                ·配置中使用property标签value属性注入简单类数据
            ·引用类型
                ·在bean中定义引用类型属性并提供可访问的set方法
                ·配置中使用property标签ref属性注入引用类数据
        ·构造器注入
            ·简单类型
                ·在bean中定义引用类型并提供可访问的构造方法
                ·配置中使用constructor-arg标签value属性注入引用类型对象
            ·引用类型
                ·在bean中定义引用类型并提供可访问的构造方法
                ·配置中使用constructor-arg标签ref属性注入引用类型对象

    ·依赖注入方式选择
        1·强制依赖使用构造器进行，使用setter注入有概率不进行注入导致null对象出现
        2·可选依赖使用setter注入进行，灵活性强
        3·Spring框架倡导使用构造器，第三方框架内部大多数采用构造器注入的形式进行数据初始化，相对严谨
        4·如果有必要可以两者同时用，使用构造器注入完成强制依赖注入，使用setter注入完成可选依赖的注入
        5·实际开发过程中还要根据实际情况分析，如果受控对象没有提供setter方法就必须使用构造器注入
        6·自己开发的模块推荐使用setter注入

·依赖自动装配
    ·IoC容器根据bean所依赖的资源在容器中自动查找并注入到bean中的过程称为自动装配
    ·自动装配方式
        ·按类型(常用)
        ·按名称
        ·按构造方法
        ·不启用自动装配
    依赖自动装配特征
        ·自动装配用于引用类型依赖注入，不能对简单类型进行操作
        ·使用按类型装配时(byType)必须保障容器中相同类型的bean唯一，推荐使用
        ·使用按名称装配时(byName)必须保障容器中局邮指定名称的bean，因变量名与配置耦合，不推荐使用
        ·自动装配优先级低于setter注入与构造器注入，同时出现时自动装配配置失效

·集合注入
    ·略

·加载properties文件
    ·开启context命名空间
    ·使用context命名空间，加载指定properties文件
        ·用location="classpath*:*.properties"可以加载所有的properties文件
        ·system-properties-mode="NEVER" 就不会跟系统的变量名起冲突
    ·使用${}读取加载的属性值