Spring

·初识Spring
	·官网：spring.io
	·Spring发展到今天已经形成了一种开发生态圈，Spring提供了若干个项目，每个项目用于完成特定的功能。
	·目前从 Spring Freamework 开始学习
	·然后从 Spring Boot 学习
	·然后学 Spring Cloud

·Spring Freamwork系统架构
	Spring Freamwork是Spring生态圈中最基础的项目，是其他项目的根基
	·Test：单元测试与集成测试
	·Core Container:核心容器
	·AOP：面向切面编程
	·Aspects：AOP思想实现
	
	·Web：Web开发
	
	·Data Integration：数据集成
	·Data Access：数据访问

学习路线：
	第一部分：核心容器
			核心概念（Ioc/DI）
			容器基本操作
	第二部分：整合
			整合数据层技术MyBatis
	第三部分：AOP
			核心概念
			AOP基础操作
			AOP实用开发
	第四部分：事务
			事务实用开发
	第五部分：家族
			SpringMVC
			SpringBoot
			SpringCloud

核心概念：
		·IoC/DI
			·代码书写现状：
				·耦合度偏高
			·解决方案：
				·使用对象时，在程序中不要主动使用new产生的对象，转换为由外部提供对象。
			·IoC（Inversion of Control）控制反转
				·对象的创建控制权由程序转移到外部，这种思想称为控制反转。
			·DI（Dependency Injection）依赖注入
				·在容器中建立bean与bean之间的依赖关系的整个过程，称为依赖注入
			·目标：充分解耦
				·使用IoC容器管理bean(IoC)
				·在IoC容器内将有依赖关系的bean进行关系绑定(DI）
			·最终效果
				·使用对象时不仅可以直接从IoC容器中获取，并且获取到的bean已经绑定了所有的依赖关系
		·Ioc容器
			·Spring技术对IoC思想进行了实现
			·Spring提供了一个容器，称为IoC容器，用来充当IoC思想中的“外部”。
		·Bean
			·Ioc容器负责对象的创建、初始化等一系列工作，被创建或被管理的对象在IoC容器中统称为Bean

IoC入门案例思路分析
1·管理什么？(Service与Dao)
2·如何将被管理的对象告知IoC容器？(配置)
3·被管理的对象交给IoC容器，如何获取到IoC容器？(接口)
4·IoC容器得到后，如何从容器中获取bean？(接口方法)
5·使用Spring导入哪些坐标？(pom.xml)

IoC入门案例(xml版本)
1·导入Spring坐标
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-context</artifactId>
        <version>5.2.10.RELEASE</version>
    </dependency>

2·定义Spring管理的类(接口)

3·创建Spring配置文件，配置对应类作为Spring管理的bean
	<bean id="BookDao" class="demo01.dao.impl.BookDaoImpl"/>
    <bean id="BookService" class="demo01.service.impl.BookServiceImpl"/>

4·初始化IoC容器(Spring核心容器/Spring容器)，通过容器获取bean


DI入门案例思路分析
1·基于IoC管理bean
2·Service中使用new形式创建的Dao对象是否保留(否)
3·Service中需要的Dao对象如何进入到Service中？(提供方法)
4·Service与Dao间的关系如何描述？(配置)

DI入门案例
1·删除使用new形式创建的代码

2·提供依赖对象对应的setter方法

3·配置service与dao之间的关系
    <bean id="BookDao" class="demo01.dao.impl.BookDaoImpl"/>
    <bean id="BookService" class="demo01.service.impl.BookServiceImpl">
        <!--7·配置service与dao的关系-->
        <!--
            property标签表示配置当前bean的属性
            name属性表示拿一个具体的属性
            ref属性表示参照哪一个bean
        -->
        <property name="bookDao" ref="BookDao"/>

    </bean>

·bean可以定义多个别名，使用,;或者空格分隔
<beand id="bookDao" name="dao book bookDaoImpl" calss="dao.impl.BookDaoImpl">
·这里bookDao，dao，book，bookDaoImpl都是指同一个bean
·如果无法获取到bean,将会抛出 NoSuchBeanDefinitionException

·默认情况下，spring提供的bean是单例的
scope="singleton",如果要非单例的话,把singleton改为prototype
·为什么bean默认为单例？
1·减少新生成对象所造成的性能损耗
2·减少jvm垃圾回收
3·除了第一次获取bean之外，后续都是从缓存中获取，速度很快
·会有什么问题么？
·单例bean做不到线程安全，所有相关的请求都共享一个bean实例，所以这个bean如果有状态的话
在并发场景下可能会出现先问题。

·适合交给容器进行管理的bean
    ·表现层对象
    ·业务层对象
    ·数据层对象
    ·工具对象
·不适合交给容器尽心管理的bean
    ·封装实体的域对象

·bean实例化
    ·bean是如何创建的
        ·bean本质上就是对象，创建bean使用构造方法完成的
    ·实例化bean的三种方式
        1·运用无参构造(无论公有私有都可以)
        2·静态工厂(配置是配置工厂类名,然后加上factory-method="造对象的方法名")
            <bean id="orderDao" class="factory.OrderDaoFactory" factory-method="getOrderDao"/>
        3·实例工厂实例化Bean
            <bean id="userFactory" class="factory.UserDaoFactory">
            <bean id="userDao" factory-method="getUserDao" factory-bean="userFactory"/>
        4·使用FactoryBean实例化bean
            <bean id="userDao" class="factory.UserDaoFactoryBean"/>

·bean生命周期
    ·生命周期：从创建到消亡的完整过程
    ·bean生命周期：bean从创建到销毁的整体过程
        ·初始化容器
            1·创建对象(内存分配)
            2·执行构造方法
            3·执行属性注入(set操作)
            4·执行bean初始化方法
        ·使用bean
            1·执行业务操作
        3·关闭/销毁容器
            1·执行bean销毁方法
                ·手工关闭容器
                ·ClassPathXmlApplicationContext接口close()操作

                ·注册关闭钩子，在虚拟机退出前先关闭容器再退出虚拟机
                ·ClassPathXmlApplicationContext接口registerShutdownHook()操作
    ·bean生命周期控制：在bean创建后到销毁前坐一些事情
        ·配置
            ·在对应类中写两个方法，在bean的配置中用init-method 和 destroy-method
                <bean id="bookdao" class="dao.impl.BookDaoImpl" init-method="init" destroy-method="destroy"/>
        ·接口
            ·在对应类实现 InitializingBean, DisposableBean接口,实现
            destroy()和afterPropertiesSet() 和 destroy()方法，
            这俩就是初始化和销毁前的方法操作

·依赖注入方式
    ·思考：
        ·向一个类中传递数据的方式有几种？
            ·普通方法(set方法)
            ·构造方法
        ·依赖注入描述了在容器中建立bean与bean之间依赖关系的过程，如果bean运行需要的是数字或者是字符串呢？
            ·引用类型
            ·简单类型(基本数据类型与String)
    ·依赖注入方式
        ·setter注入
            ·简单类型
                ·在bean中定义引用类型属性并提供可访问的set方法
                ·配置中使用property标签value属性注入简单类数据
            ·引用类型
                ·在bean中定义引用类型属性并提供可访问的set方法
                ·配置中使用property标签ref属性注入引用类数据
        ·构造器注入
            ·简单类型
                ·在bean中定义引用类型并提供可访问的构造方法
                ·配置中使用constructor-arg标签value属性注入引用类型对象
            ·引用类型
                ·在bean中定义引用类型并提供可访问的构造方法
                ·配置中使用constructor-arg标签ref属性注入引用类型对象

    ·依赖注入方式选择
        1·强制依赖使用构造器进行，使用setter注入有概率不进行注入导致null对象出现
        2·可选依赖使用setter注入进行，灵活性强
        3·Spring框架倡导使用构造器，第三方框架内部大多数采用构造器注入的形式进行数据初始化，相对严谨
        4·如果有必要可以两者同时用，使用构造器注入完成强制依赖注入，使用setter注入完成可选依赖的注入
        5·实际开发过程中还要根据实际情况分析，如果受控对象没有提供setter方法就必须使用构造器注入
        6·自己开发的模块推荐使用setter注入

·依赖自动装配
    ·IoC容器根据bean所依赖的资源在容器中自动查找并注入到bean中的过程称为自动装配
    ·自动装配方式
        ·按类型(常用)
        ·按名称
        ·按构造方法
        ·不启用自动装配
    依赖自动装配特征
        ·自动装配用于引用类型依赖注入，不能对简单类型进行操作
        ·使用按类型装配时(byType)必须保障容器中相同类型的bean唯一，推荐使用
        ·使用按名称装配时(byName)必须保障容器中局邮指定名称的bean，因变量名与配置耦合，不推荐使用
        ·自动装配优先级低于setter注入与构造器注入，同时出现时自动装配配置失效

·集合注入
    ·略

·加载properties文件
    ·开启context命名空间
    ·使用context命名空间，加载指定properties文件
        ·用location="classpath*:*.properties"可以加载所有的properties文件
        ·system-properties-mode="NEVER" 就不会跟系统的变量名起冲突
    ·使用${}读取加载的属性值

·容器
    ·容器
    ·获取bean
        ·按名称
        ·按类型(容器中同一类型只能有一个)
        ·使用名称并指定类型
    ·容器类层次结构
    ·BeanFactory
        ·顶层

·核心容器总结
    ·容器相关
        ·BeanFactory是IoC容器的顶层接口，初始化BeanFactory对象时，加载的bean延迟加载
        ·ApplicationContext接口时Spring容器的核心接口，初始化时bean立即加载
        ·ApplicationContext接口提供基础的bean操作相关方法，通过其他接口扩展功能
        ·ApplicationContext接口常用初始化类
            ·ClaaPathXmlApplicationContext
            ·FileSystemXmlApplicationContext
    ·bean相关
        ·定义bean
            ·bean标签
                ·id属性
                ·class属性
        ·配置第三方bean
            ·bean标签
            ·静态工厂、实例工厂、FactoryBean
        ·作用范围
            ·scope属性
        ·生命周期
            ·标准接口
            ·init-method
            ·destroy-method
    ·依赖注入相关
        ·setter注入(set方法)
            ·引用/简单
        ·构造器注入(构造方法)
        ·自动装配


·注解开发
    ·注解开发定义bean
        1·写的类上添加注解
            ·@Component         通用
                ·@Controller    一般用于控制层
                ·@Service       一般用于业务层
                ·@Repository    一般用于数据层
           配置文件中这样弄
            <context:component-scan base-package="dao"/>
            <context:component-scan base-package="service"/>
    ·纯注解开发
        ·弄一个Config包，里面放一个SpringConfig类
            加上注解
                @Configuration
                @ComponentScan({"dao","service","control"})
                public class SpringConfig {
                }
        用到的类
        AnnotationConfigApplicationContext

    ·bean作用范围
        ·类上添加注解
            @Scope("singleton")  单例
            或
            @Scope("prototype")  非单例
    ·bean生命周期
        ·方法上添加注解
        @PostConstruct      //初始化
        public void init(){
            System.out.println("book dao init...");
        }
        @PreDestroy         //销毁前
        public void destory(){
            System.out.println("book dao destory...");
        }

    ·依赖注入
        ·自动装配
            ·使用@Autowired注解开启自动装配模式(按类型)
                ·注意：自动装配基于反射设计创建对象并暴力反射对应属性为私有属性初始化数据，因此无需提供setter方法
                ·注意：自动装配建议使用无参构造方法创建对象(默认)，如果不提供对应方法，请提供唯一的构造方法

            ·使用Qualifier注解开启指定名称装配bean
                ·注意：@Qualifier注解无法单独使用，必须配合@Autowired注解使用

            ·简单属性注解用@Value()不用@Autowired，这样写而不直接定义默认构造值，
                是因为这样可以引用到外部的properties文件内的内容

            ·properties内容加载
            ·在SpringConfig类上添加注解
            ·@PropertySource("jdbc.properties")  //跟上面一样，想写很多个要用大括号写数组，不能用通配符

        ·第三方bean依赖注入
            ·简单类型依赖注入，直接在成员变量上添加注解@Value
            ·引用类型依赖注入，设置形参即可，容器会根据类属性自动装配对象

·注解开发总结
    ·定义bean
        ·@Component
            ·@Controller
            ·@Service
            ·@Repository
        ·@ComponentScan
    ·设置依赖注入
        ·@Autowired
            ·@Qualifier
        ·@Value
    ·配置第三方bean
        ·@Bean
    ·作用范围
        ·@Scope
    ·生命周期
        @PostConstructor
        @PreDestroy

·Spring整合MyBatis
    ·在mybatis连上数据库的基础操作之上，添加两个依赖
        <dependency>
             <groupId>org.springframework</groupId>
             <artifactId>spring-jdbc</artifactId>
             <version>5.2.14.RELEASE</version>
         </dependency>

         <dependency>
             <groupId>org.mybatis</groupId>
             <artifactId>mybatis-spring</artifactId>
             <version>1.3.2</version>
         </dependency>
    ·添加数据源JdbcConfig
        ·注意别忘了给public DataSource datasource(){···}方法上添加@Bean
    ·添加MybtisConfig，设置两个类
        @Bean
        public SqlSessionFactoryBean sqlSessionFactory(DataSource dataSource){
            SqlSessionFactoryBean ssfb = new SqlSessionFactoryBean();
            ssfb.setTypeAliasesPackage("com.pojo");
            ssfb.setDataSource(dataSource);
            return ssfb;
        }
        @Bean
        public MapperScannerConfigurer mapperScannerConfigurer(){
            MapperScannerConfigurer msc=new MapperScannerConfigurer();
            msc.setBasePackage("com.dao");
            return msc;
        }
    ·整合JUnit
        ·添加依赖
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.12</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-test</artifactId>
                <version>5.2.12.RELEASE</version>
            </dependency>
        ·test类上添加两个注解
            @RunWith(SpringJUnit4ClassRunner.class)
            @ContextConfiguration(classes = SpringConfig.class)
        ·在test类中引入用@Autowired引入测试类

·AOP
    ·AOP(Aspect Oriented Programming)面向切面编程，一种编程范式，指导开发者如何组织程序结构
    ·作用：在不惊动原始设计的基础上为其功能增强
    ·Spring理念：无入侵式/无侵入式

    ·AOP核心概念
        ·连接点(JoinPoint):程序执行过程中的任意位置，粒度为执行方法、抛出异常、设置变量等
            ·在SpringAOP中，理解为方法的执行
        ·切入点(Pointcut):匹配连接点的式子
            ·在SpringAOP中，一个切入点可以只描述一个具体的方法，也可以匹配多个方法
                ·
                ·
        ·通知(Advice):在切入点处执行的操作，也就是共性功能
            ·在SpringAOP中，功能最终以方法的形式呈现
        ·通知类:定义通知的类
        ·切面(Aspect):描述通知与切入点的对应关系

    ·AOP入门案例思路分析
        ·案例设定：测定接口执行效率
        ·简化设定：在接口执行前输出当前系统时间
        ·开发模式：注解
        ·思路分析：
        1·导入坐标(pom.xml)
        2·制作连接点方法(原始操作,Dao接口与实现类)
        3·制作共性功能(通知类与通知)
        4·定义切入点
        5·绑定切入点与通知关系(切面)

        ·具体实现：
            1·添加依赖
                <dependency>
                    <groupId>org.aspectj</groupId>
                    <artifactId>aspectjweaver</artifactId>
                    <version>1.9.6</version>
                </dependency>
            2·在SpringConfig类上添加注解
                @EnableAspectJAutoProxy
            3·开一个AOP的包，创一个MyAdvice类
                添加俩注解
                @Component
                @Aspect
            4·MyAdvice中定义好切入点和通知
                ·切入点定义依托一个不具有实际意义的方法进行，即无参数，无返回值，方法无实际逻辑
            5·绑定切入点和通知
                @Pointcut("execution(void com.dao.BookDao.update())")
                private void pt(){
                }
                @Before("pt()")
                public void method(){
                    System.out.println(System.currentTimeMillis());
                }

    ·AOP工作流程
        1·Spring容器启动
        2·读取所有切面配置中的切入点
        3·初始化bean，判定bean对应的类中的方法是否匹配到任意切入点
            ·匹配失败，创建对象
            ·匹配成功，创建原始对象(目标对象)的代理对象
        4·获取bean执行方法
            ·获取bean，调用方法并执行，完成操作
            ·获取的bean式代理对象时，根据代理对象的运行模式运行原始方法与增强的内容，完成操作
    ·AOP核心概念
       ·目标对象(Target):原始功能去掉共性功能对应的类产生的对象，这种对象是无法直接完成工作的
       ·代理(Proxy):目标对象无法直接完成工作，需要对其共鞥你进行回填，通过原始对象的代理对象实现
    ·SpringAOP本质：代理模式

    ·AOP切入点表达式：切入点：要进行增强的方法；切入点表达式：要进行增强的方法的描述方式
        ·语法格式
            ·
        ·通配符
            ·
        ·书写技巧
            ·

    ·AOP通知类型
        ·AOP通知描述了抽取的共性，根据共性功能抽取的位置不同，最终运行代码时要将其加入到合理的位置
        ·AOP通知共分为5种类型
            ·前置通知
                @Before("pt()")
            ·后置通知
                @After("pt()")
            ·环绕通知
                1·环绕通知必须依赖形参PreceedingJoinPoint才能实现对原始方法的调用，进而实现原始方法调用前后同时添加通知
                2·通知中如果未用PreceedingJoinPoint对原始方法进行调用将跳过原始方法的执行
                3·对原始方法的调用可以不接收返回值，通知方法设置成void即可，如果接收返回值，必须设定为Object类型
                4·原始方法的返回值如果是void类型，通知方法的返回值可以设置成void，也可以设置成Objcet
                5·由于无法预知原始方法运行后是否会抛出异常，一次环绕通知方法必须抛出Throwable对象
                @Around("pt()")
                public Object around(PreceedingJoinPoint pjp) throws Throwable{
                    System.out.println("around before advice ...");
                    Object ret=pjp.proceed();
                    System.out.println("around after advice...");
                    return ret;
                }

            ·返回后通知
                @AfterReturning("pt()")
            ·抛出异常后通知
                @AfterThrowing("pt()")

    AOP案例:测量业务层接口万次执行效率
        需求：任意业务层接口执行效率均可显示其执行效率(执行时长)
        分析：
        ①：业务功能：业务层接口执行前后分别记录时间，求差直得到执行效率
        ②：通知类型选择前后均可以增强的类型——环绕通知
        ·具体实现
            @Around("Servicept()")
            public void runSpeed(ProceedingJoinPoint pjp) throws Throwable {
                Signature signature = pjp.getSignature();
                String classname = signature.getDeclaringTypeName();
                String methodname = signature.getName();

                long start=System.currentTimeMillis();
                for(int i=0;i<10000;i++) {
                    Object ret = pjp.proceed();
                }
                long end = System.currentTimeMillis();

                System.out.println(classname+"."+methodname+"方法执行一万次用了---->"+(end-start)+"ms");
            }

    ·AOP通知获取数据
        ·获取参数
            ·JoinPoint:适用于前置、后置、返回后、抛出异常后通知
            ·ProceedJointPoint:适用于环绕通知
        ·获取返回值
            ·返回后通知
            ·环绕通知
        ·获取异常
            ·抛出异常后通知
            ·环绕通知
    ·AOP百度网盘密码数据兼容处理
    分析：
    ①:在业务方法执行前对所有的输入参数进行格式处理--trim()
    ②:使用处理后参数调用原始方法——环绕通知种存在对原始方法的调用

·AOP总结：
    ·概念：AOP面向切面编程，一种编程范式
    ·作用：在不惊动原始设计的基础上为方法进行功能增强
    ·核心概念：
        ·代理：SpringAOP的核心本质是采用代理模式实现的
        ·连接点：在SpringAOP种，理解为任意方法的执行
        ·切入点：匹配连接点的式子，也是具有共性功能的方法描述
        ·通知：若干个方法的共性功能，在切入点处执行，最终体现为一个方法
        ·切面：描述通知与切入点的对应关系
        ·目标对象：被代理的原始对象称为目标对象
    ·切入点表达式标准格式：动作关键字(访问修饰符 返回值 包名.类名/接口名.方法名(参数)异常名)
        ·execution(boolean com.service.ResourceService.openURL(*,*))
        ·切入点表达式描述通配符：
            ·作用：用于快速描述，范围描述
            · *  ：匹配任意一个符号
            · .. ：匹配多个连续的任意个符号
            · +  : 匹配子类类型
    ·切入点表达式书写技巧：
        1·按标准规范开发
        2·查询操作的返回值建议使用*匹配
        3·减少使用..的形式描述包
        4·对接口进行描述，使用*表示模块名，例如UserService的匹配描述为*Service
        5·方法名书写保留动词，例如，get，使用*表示名词，例如getById匹配描述为getBy*
        6·参数根据实际情况灵活调整

    通知类型：
        ·环绕通知(重点)
            ·环绕通知依赖形参ProceedingJoinPoint才能实现对原始方法的调用
            ·环绕通知可以隔离原始方法的调用执行
            ·环绕通知返回值设置为Object类型
            ·环绕通知中可以对原始方法调用过程中出现异常进行处理

·Spring事务简介
    ·事务作用：在数据层保障一系列的数据库操作同成功同失败
    ·Spring事务作用：在数据层或业务层保障一系列的数据库操作同成功同失败

    案例：银行账户转账
    需求：实现任意两个账户间转账操作
    需求微缩：A账户减钱，B账户加钱
    分析：
    ①：数据层提供基础操作，提供账户减钱，指定账户加钱
    ②：业务层提供转账操作，调用减钱与加钱操纵
    ③：提供两个账号和操作金额执行转账操作
    ④：Spring整合MyBatis环境搭建上述操作
    结果分析：
    ①：程序正常执行时，账户金额A减B加，没有问题
    ②：程序出现异常后，转账失败，但是异常之前操作成功，异常之后操作失败，整体业务失败
    ·具体操作
        ①：在业务接口层上添加Spring事务管理
            @Transactional
            public void transfer(String out,String in,Integer money);
                ·注意事项：
                Spring注解式事务通常添加在业务层接口中而不会添加到业务层实现类中，降低偶尔
                注解式事务可以添加到业务方法上表示当前接口所有方法开启事务
        ②：设置事务管理器
            @Bean
            public PlatformTransactionManager transactionManager(DataSource dataSource){
                DataSourceTransactionManager dataSourceTransactionManager = new DataSourceTransactionManager();
                dataSourceTransactionManager.setDataSource(dataSource);
                return dataSourceTransactionManager;
            }
            事务管理器要根据实现技术进行选择
            MyBatis框架使用的是JDBC事务
        ③：开启注解式事务驱动
            SpringConfig类上添加注解：
            @EnableTransactionManagement

    ·Spring事务角色
        ·事务管理员：事务发起方，在Spring中通常指代业务层开启事务的方法
        ·事务协调员：假如事务方，在Spring中通常指代数据层方法，也可以是业务层方法

    ·事务相关配置
        @Transactional(rollbackFor={XXXXX.class})
        否则有些异常不会回滚

    ·案例：转账业务追加日志
    在上述 案例：银行账户转账 的基础上，实现日志模块
    要求无论转账事务是否成功，都要添加日志记录
    现存在的问题：
        日志的记录与转账操作隶属于同一个事务，同成功同失败
    实现效果预期改进：
        无论转账是否成功，日志必须保留

    事务的传播行为：事务协调员对事务管理员所携带事务的处理态度
    在业务层接口上添加Spring事务，设置事务传播行为REQUIRES_NEW(需要新事物)
    @Transactional(propagation = Propagation.REQUIRES_NEW)

